{"ast":null,"code":"const getWordDefaultDictionary=async word=>{const baseUrl='https://api.dictionaryapi.dev/api/v2/entries/en/';const urlToFetch=\"\".concat(baseUrl).concat(word);try{const response=await fetch(urlToFetch);if(response.ok){const formattedDefinitions={};const jsonResponse=await response.json();const wordInfo=jsonResponse[0];// console.log(wordInfo)\nconst wordMeanings=wordInfo.meanings;wordMeanings.forEach(meaning=>{formattedDefinitions[meaning.partOfSpeech]=meaning.definitions;});// console.log(formattedDefinitions)\nconst wordDefinitions=wordMeanings[0].definitions;// wordDefinitions.forEach(item => console.log(`${item.definition}\\n`))\n// console.log(formattedDefinitions)\nreturn formattedDefinitions;}}catch(error){const dictionary={dictionary:undefined};return dictionary;}};// Define an async function to make the request and return a dictionary\nasync function getUrbanDictionaryDefinitions(word){const url=\"https://urban-dictionary7.p.rapidapi.com/v0/define?term=\".concat(word);const options={method:'GET',headers:{'X-RapidAPI-Key':process.env.REACT_APP_RAPID_API_KEY,'X-RapidAPI-Host':'urban-dictionary7.p.rapidapi.com'}};try{const response=await fetch(url,options);const wordInfo=await response.json();// Get definitions from response\nconst definitions=wordInfo.list;// If there is no definitions return undefined\nif(definitions.length===0){const urbandict={dictionary:undefined};return urbandict;}// Prepare the dictionary object\nconst urbandict={definitions:definitions.map(definition=>{return{definition:definition.definition};})};return urbandict;}catch(error){// Log any errors that occur\nconsole.error('Error fetching data from Urban Dictionary:',error);return null;}}const dictionaries={getWordDefaultDictionary,getUrbanDictionaryDefinitions};export default dictionaries;","map":{"version":3,"names":["getWordDefaultDictionary","word","baseUrl","urlToFetch","concat","response","fetch","ok","formattedDefinitions","jsonResponse","json","wordInfo","wordMeanings","meanings","forEach","meaning","partOfSpeech","definitions","wordDefinitions","error","dictionary","undefined","getUrbanDictionaryDefinitions","url","options","method","headers","process","env","REACT_APP_RAPID_API_KEY","list","length","urbandict","map","definition","console","dictionaries"],"sources":["C:/Programming/React/definition-app/src/Modules/API's.js"],"sourcesContent":["const getWordDefaultDictionary = async (word) => {\r\n\r\n    const baseUrl = 'https://api.dictionaryapi.dev/api/v2/entries/en/'\r\n    const urlToFetch = `${baseUrl}${word}`;\r\n\r\n    try {\r\n        const response = await fetch(urlToFetch);\r\n        if (response.ok) {\r\n            const formattedDefinitions = {}\r\n\r\n            const jsonResponse = await response.json();\r\n            const wordInfo = jsonResponse[ 0 ];\r\n            // console.log(wordInfo)\r\n\r\n            const wordMeanings = wordInfo.meanings\r\n            wordMeanings.forEach(meaning => {\r\n                formattedDefinitions[meaning.partOfSpeech] = meaning.definitions;\r\n            })\r\n\r\n            // console.log(formattedDefinitions)\r\n            const wordDefinitions = wordMeanings[0].definitions\r\n\r\n            // wordDefinitions.forEach(item => console.log(`${item.definition}\\n`))\r\n            // console.log(formattedDefinitions)\r\n            return formattedDefinitions;\r\n        }\r\n    } catch (error) {\r\n        const dictionary = {\r\n            dictionary: undefined\r\n        }\r\n        return dictionary\r\n    }\r\n};\r\n\r\n\r\n\r\n// Define an async function to make the request and return a dictionary\r\nasync function getUrbanDictionaryDefinitions(word) {\r\n    const url = `https://urban-dictionary7.p.rapidapi.com/v0/define?term=${word}`;\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'X-RapidAPI-Key': process.env.REACT_APP_RAPID_API_KEY,\r\n            'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(url, options);\r\n        const wordInfo = await response.json()\r\n\r\n        // Get definitions from response\r\n        const definitions = wordInfo.list;\r\n\r\n        // If there is no definitions return undefined\r\n        if (definitions.length === 0) {\r\n            const urbandict = {\r\n                dictionary: undefined\r\n            }\r\n            return urbandict\r\n        }\r\n\r\n        // Prepare the dictionary object\r\n        const urbandict = {\r\n            definitions: definitions.map(definition => {\r\n                return {\r\n                    definition: definition.definition\r\n                };\r\n            })\r\n        };\r\n\r\n        return urbandict;\r\n    } catch (error) {\r\n        // Log any errors that occur\r\n        console.error('Error fetching data from Urban Dictionary:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst dictionaries = { getWordDefaultDictionary, getUrbanDictionaryDefinitions }\r\n\r\nexport default dictionaries"],"mappings":"AAAA,KAAM,CAAAA,wBAAwB,CAAG,KAAO,CAAAC,IAAI,EAAK,CAE7C,KAAM,CAAAC,OAAO,CAAG,kDAAkD,CAClE,KAAM,CAAAC,UAAU,IAAAC,MAAA,CAAMF,OAAO,EAAAE,MAAA,CAAGH,IAAI,CAAE,CAEtC,GAAI,CACA,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACH,UAAU,CAAC,CACxC,GAAIE,QAAQ,CAACE,EAAE,CAAE,CACb,KAAM,CAAAC,oBAAoB,CAAG,CAAC,CAAC,CAE/B,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAC1C,KAAM,CAAAC,QAAQ,CAAGF,YAAY,CAAE,CAAC,CAAE,CAClC;AAEA,KAAM,CAAAG,YAAY,CAAGD,QAAQ,CAACE,QAAQ,CACtCD,YAAY,CAACE,OAAO,CAACC,OAAO,EAAI,CAC5BP,oBAAoB,CAACO,OAAO,CAACC,YAAY,CAAC,CAAGD,OAAO,CAACE,WAAW,CACpE,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,eAAe,CAAGN,YAAY,CAAC,CAAC,CAAC,CAACK,WAAW,CAEnD;AACA;AACA,MAAO,CAAAT,oBAAoB,CAC/B,CACJ,CAAE,MAAOW,KAAK,CAAE,CACZ,KAAM,CAAAC,UAAU,CAAG,CACfA,UAAU,CAAEC,SAChB,CAAC,CACD,MAAO,CAAAD,UAAU,CACrB,CACJ,CAAC,CAID;AACA,cAAe,CAAAE,6BAA6BA,CAACrB,IAAI,CAAE,CAC/C,KAAM,CAAAsB,GAAG,4DAAAnB,MAAA,CAA8DH,IAAI,CAAE,CAC7E,KAAM,CAAAuB,OAAO,CAAG,CACZC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACL,gBAAgB,CAAEC,OAAO,CAACC,GAAG,CAACC,uBAAuB,CACrD,iBAAiB,CAAE,kCACvB,CACJ,CAAC,CAED,GAAI,CACA,KAAM,CAAAxB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACiB,GAAG,CAAEC,OAAO,CAAC,CAC1C,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAN,QAAQ,CAACK,IAAI,CAAC,CAAC,CAEtC;AACA,KAAM,CAAAO,WAAW,CAAGN,QAAQ,CAACmB,IAAI,CAEjC;AACA,GAAIb,WAAW,CAACc,MAAM,GAAK,CAAC,CAAE,CAC1B,KAAM,CAAAC,SAAS,CAAG,CACdZ,UAAU,CAAEC,SAChB,CAAC,CACD,MAAO,CAAAW,SAAS,CACpB,CAEA;AACA,KAAM,CAAAA,SAAS,CAAG,CACdf,WAAW,CAAEA,WAAW,CAACgB,GAAG,CAACC,UAAU,EAAI,CACvC,MAAO,CACHA,UAAU,CAAEA,UAAU,CAACA,UAC3B,CAAC,CACL,CAAC,CACL,CAAC,CAED,MAAO,CAAAF,SAAS,CACpB,CAAE,MAAOb,KAAK,CAAE,CACZ;AACAgB,OAAO,CAAChB,KAAK,CAAC,4CAA4C,CAAEA,KAAK,CAAC,CAClE,MAAO,KAAI,CACf,CACJ,CAGA,KAAM,CAAAiB,YAAY,CAAG,CAAEpC,wBAAwB,CAAEsB,6BAA8B,CAAC,CAEhF,cAAe,CAAAc,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}