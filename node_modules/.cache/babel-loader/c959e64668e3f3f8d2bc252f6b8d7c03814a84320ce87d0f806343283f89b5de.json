{"ast":null,"code":"const getWordDefaultDictionary = async word => {\n  const baseUrl = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\n  const urlToFetch = `${baseUrl}${word}`;\n  try {\n    const response = await fetch(urlToFetch);\n    if (response.ok) {\n      const formattedDefinitions = {};\n      const jsonResponse = await response.json();\n      const wordInfo = jsonResponse[0];\n      // console.log(wordInfo)\n\n      const wordMeanings = wordInfo.meanings;\n      wordMeanings.forEach(meaning => {\n        formattedDefinitions[meaning.partOfSpeech] = meaning.definitions;\n      });\n\n      // console.log(formattedDefinitions)\n      const wordDefinitions = wordMeanings[0].definitions;\n\n      // wordDefinitions.forEach(item => console.log(`${item.definition}\\n`))\n      // console.log(formattedDefinitions)\n      return formattedDefinitions;\n    }\n  } catch (error) {\n    const dictionary = {\n      dictionary: undefined\n    };\n    return dictionary;\n  }\n};\n\n// Define an async function to make the request and return a dictionary\nasync function getUrbanDictionaryDefinitions(word) {\n  const url = `https://urban-dictionary7.p.rapidapi.com/v0/define?term=${word}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': '0edc2577dfmshd7da9fdc734b359p1b590fjsn8c739bb8a679',\n      'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\n    }\n  };\n  try {\n    const response = await fetch(url, options);\n    const wordInfo = await response.json();\n\n    // Get definitions from response\n    const definitions = wordInfo.list;\n\n    // If there is no definitions return undefined\n    if (definitions.length === 0) {\n      const urbandict = {\n        dictionary: undefined\n      };\n      return urbandict;\n    }\n\n    // Prepare the dictionary object\n    const urbandict = {\n      definitions: definitions.map(definition => {\n        return {\n          definition: definition.definition\n        };\n      })\n    };\n    return urbandict;\n  } catch (error) {\n    // Log any errors that occur\n    console.error('Error fetching data from Urban Dictionary:', error);\n    return null;\n  }\n}\nconst dictionaries = {\n  getWordDefaultDictionary,\n  getUrbanDictionaryDefinitions\n};\nexport default dictionaries;","map":{"version":3,"names":["getWordDefaultDictionary","word","baseUrl","urlToFetch","response","fetch","ok","formattedDefinitions","jsonResponse","json","wordInfo","wordMeanings","meanings","forEach","meaning","partOfSpeech","definitions","wordDefinitions","error","dictionary","undefined","getUrbanDictionaryDefinitions","url","options","method","headers","list","length","urbandict","map","definition","console","dictionaries"],"sources":["C:/Programming/React/definition-app/src/Modules/API's.js"],"sourcesContent":["const getWordDefaultDictionary = async (word) => {\r\n    const baseUrl = 'https://api.dictionaryapi.dev/api/v2/entries/en/'\r\n    const urlToFetch = `${baseUrl}${word}`;\r\n\r\n    try {\r\n        const response = await fetch(urlToFetch);\r\n        if (response.ok) {\r\n            const formattedDefinitions = {}\r\n\r\n            const jsonResponse = await response.json();\r\n            const wordInfo = jsonResponse[ 0 ];\r\n            // console.log(wordInfo)\r\n\r\n            const wordMeanings = wordInfo.meanings\r\n            wordMeanings.forEach(meaning => {\r\n                formattedDefinitions[meaning.partOfSpeech] = meaning.definitions;\r\n            })\r\n\r\n            // console.log(formattedDefinitions)\r\n            const wordDefinitions = wordMeanings[0].definitions\r\n\r\n            // wordDefinitions.forEach(item => console.log(`${item.definition}\\n`))\r\n            // console.log(formattedDefinitions)\r\n            return formattedDefinitions;\r\n        }\r\n    } catch (error) {\r\n        const dictionary = {\r\n            dictionary: undefined\r\n        }\r\n        return dictionary\r\n    }\r\n};\r\n\r\n\r\n\r\n// Define an async function to make the request and return a dictionary\r\nasync function getUrbanDictionaryDefinitions(word) {\r\n    const url = `https://urban-dictionary7.p.rapidapi.com/v0/define?term=${word}`;\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'X-RapidAPI-Key': '0edc2577dfmshd7da9fdc734b359p1b590fjsn8c739bb8a679',\r\n            'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(url, options);\r\n        const wordInfo = await response.json()\r\n\r\n        // Get definitions from response\r\n        const definitions = wordInfo.list;\r\n\r\n        // If there is no definitions return undefined\r\n        if (definitions.length === 0) {\r\n            const urbandict = {\r\n                dictionary: undefined\r\n            }\r\n            return urbandict\r\n        }\r\n\r\n        // Prepare the dictionary object\r\n        const urbandict = {\r\n            definitions: definitions.map(definition => {\r\n                return {\r\n                    definition: definition.definition\r\n                };\r\n            })\r\n        };\r\n\r\n        return urbandict;\r\n    } catch (error) {\r\n        // Log any errors that occur\r\n        console.error('Error fetching data from Urban Dictionary:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst dictionaries = { getWordDefaultDictionary, getUrbanDictionaryDefinitions }\r\n\r\nexport default dictionaries"],"mappings":"AAAA,MAAMA,wBAAwB,GAAG,MAAOC,IAAI,IAAK;EAC7C,MAAMC,OAAO,GAAG,kDAAkD;EAClE,MAAMC,UAAU,GAAI,GAAED,OAAQ,GAAED,IAAK,EAAC;EAEtC,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,UAAU,CAAC;IACxC,IAAIC,QAAQ,CAACE,EAAE,EAAE;MACb,MAAMC,oBAAoB,GAAG,CAAC,CAAC;MAE/B,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAC1C,MAAMC,QAAQ,GAAGF,YAAY,CAAE,CAAC,CAAE;MAClC;;MAEA,MAAMG,YAAY,GAAGD,QAAQ,CAACE,QAAQ;MACtCD,YAAY,CAACE,OAAO,CAACC,OAAO,IAAI;QAC5BP,oBAAoB,CAACO,OAAO,CAACC,YAAY,CAAC,GAAGD,OAAO,CAACE,WAAW;MACpE,CAAC,CAAC;;MAEF;MACA,MAAMC,eAAe,GAAGN,YAAY,CAAC,CAAC,CAAC,CAACK,WAAW;;MAEnD;MACA;MACA,OAAOT,oBAAoB;IAC/B;EACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;IACZ,MAAMC,UAAU,GAAG;MACfA,UAAU,EAAEC;IAChB,CAAC;IACD,OAAOD,UAAU;EACrB;AACJ,CAAC;;AAID;AACA,eAAeE,6BAA6BA,CAACpB,IAAI,EAAE;EAC/C,MAAMqB,GAAG,GAAI,2DAA0DrB,IAAK,EAAC;EAC7E,MAAMsB,OAAO,GAAG;IACZC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,gBAAgB,EAAE,oDAAoD;MACtE,iBAAiB,EAAE;IACvB;EACJ,CAAC;EAED,IAAI;IACA,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAACiB,GAAG,EAAEC,OAAO,CAAC;IAC1C,MAAMb,QAAQ,GAAG,MAAMN,QAAQ,CAACK,IAAI,CAAC,CAAC;;IAEtC;IACA,MAAMO,WAAW,GAAGN,QAAQ,CAACgB,IAAI;;IAEjC;IACA,IAAIV,WAAW,CAACW,MAAM,KAAK,CAAC,EAAE;MAC1B,MAAMC,SAAS,GAAG;QACdT,UAAU,EAAEC;MAChB,CAAC;MACD,OAAOQ,SAAS;IACpB;;IAEA;IACA,MAAMA,SAAS,GAAG;MACdZ,WAAW,EAAEA,WAAW,CAACa,GAAG,CAACC,UAAU,IAAI;QACvC,OAAO;UACHA,UAAU,EAAEA,UAAU,CAACA;QAC3B,CAAC;MACL,CAAC;IACL,CAAC;IAED,OAAOF,SAAS;EACpB,CAAC,CAAC,OAAOV,KAAK,EAAE;IACZ;IACAa,OAAO,CAACb,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IAClE,OAAO,IAAI;EACf;AACJ;AAGA,MAAMc,YAAY,GAAG;EAAEhC,wBAAwB;EAAEqB;AAA8B,CAAC;AAEhF,eAAeW,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}