{"ast":null,"code":"const getWordDefaultDictionary = async word => {\n  const baseUrl = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\n  const urlToFetch = `${baseUrl}${word}`;\n  try {\n    const response = await fetch(urlToFetch);\n    if (response.ok) {\n      const formattedDefinitions = {};\n      const jsonResponse = await response.json();\n      const wordInfo = jsonResponse[0];\n      // console.log(wordInfo)\n\n      const wordMeanings = wordInfo.meanings;\n      wordMeanings.forEach(meaning => {\n        formattedDefinitions[meaning.partOfSpeech] = meaning.definitions;\n      });\n      console.log(formattedDefinitions);\n      return formattedDefinitions;\n    }\n  } catch (error) {\n    return {\n      dictionary: undefined\n    };\n  }\n};\n\n// Define an async function to make the request and return a dictionary\nasync function getUrbanDictionaryDefinitions(word) {\n  const url = `https://urban-dictionary7.p.rapidapi.com/v0/define?term=${word}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': process.env.REACT_APP_RAPID_API_KEY,\n      'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\n    }\n  };\n  try {\n    const response = await fetch(url, options);\n    const wordInfo = await response.json();\n\n    // Get definitions from response\n    const definitions = wordInfo.list;\n    console.log(definitions);\n\n    // If there is no definitions return undefined\n    if (definitions.length === 0) {\n      const urbandict = {\n        dictionary: undefined\n      };\n      return urbandict;\n    }\n\n    // Prepare the dictionary object\n    const urbandict = {\n      definitions: definitions.map(definition => {\n        return {\n          definition: definition.definition\n        };\n      })\n    };\n    return urbandict;\n  } catch (error) {\n    // Log any errors that occur\n    console.error('Error fetching data from Urban Dictionary:', error);\n    return {\n      dictionary: undefined\n    };\n  }\n}\nconst getAlternativeDictionary = async word => {\n  const urlToFetch = `https://dictionary-data-api.p.rapidapi.com/definition/${word}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': '6e50a9b4ebmsh947bc781503473cp1a6290jsnbeb98c5847ad',\n      'X-RapidAPI-Host': 'dictionary-data-api.p.rapidapi.com'\n    }\n  };\n  try {\n    const response = await fetch(urlToFetch, options);\n    if (response.ok) {\n      const jsonResponse = await response.json();\n      const formattedDefinitions = {};\n      jsonResponse.meaning.forEach(meaning => {\n        const definitions = meaning.values.map(definition => ({\n          definition: definition\n        }));\n        formattedDefinitions[meaning.tag] = definitions;\n      });\n      console.log(jsonResponse);\n      return formattedDefinitions;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nconst dictionaries = {\n  getWordDefaultDictionary,\n  getUrbanDictionaryDefinitions,\n  getWordDefFR: getAlternativeDictionary\n};\nexport default dictionaries;","map":{"version":3,"names":["getWordDefaultDictionary","word","baseUrl","urlToFetch","response","fetch","ok","formattedDefinitions","jsonResponse","json","wordInfo","wordMeanings","meanings","forEach","meaning","partOfSpeech","definitions","console","log","error","dictionary","undefined","getUrbanDictionaryDefinitions","url","options","method","headers","process","env","REACT_APP_RAPID_API_KEY","list","length","urbandict","map","definition","getAlternativeDictionary","values","tag","dictionaries","getWordDefFR"],"sources":["C:/Programming/React/definition-app/src/Modules/API's.js"],"sourcesContent":["const getWordDefaultDictionary = async (word) => {\r\n\r\n    const baseUrl = 'https://api.dictionaryapi.dev/api/v2/entries/en/'\r\n    const urlToFetch = `${baseUrl}${word}`;\r\n\r\n    try {\r\n        const response = await fetch(urlToFetch);\r\n        if (response.ok) {\r\n            const formattedDefinitions = {}\r\n\r\n            const jsonResponse = await response.json();\r\n            const wordInfo = jsonResponse[ 0 ];\r\n            // console.log(wordInfo)\r\n\r\n            const wordMeanings = wordInfo.meanings\r\n            wordMeanings.forEach(meaning => {\r\n                formattedDefinitions[meaning.partOfSpeech] = meaning.definitions;\r\n            })\r\n\r\n            console.log(formattedDefinitions)\r\n            return formattedDefinitions;\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            dictionary: undefined\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n// Define an async function to make the request and return a dictionary\r\nasync function getUrbanDictionaryDefinitions(word) {\r\n    const url = `https://urban-dictionary7.p.rapidapi.com/v0/define?term=${word}`;\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'X-RapidAPI-Key': process.env.REACT_APP_RAPID_API_KEY,\r\n            'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(url, options);\r\n        const wordInfo = await response.json()\r\n\r\n        // Get definitions from response\r\n        const definitions = wordInfo.list;\r\n\r\n        console.log(definitions)\r\n\r\n        // If there is no definitions return undefined\r\n        if (definitions.length === 0) {\r\n            const urbandict = {\r\n                dictionary: undefined\r\n            }\r\n            return urbandict\r\n        }\r\n\r\n        // Prepare the dictionary object\r\n        const urbandict = {\r\n            definitions: definitions.map(definition => {\r\n                return {\r\n                    definition: definition.definition\r\n                };\r\n            })\r\n        };\r\n\r\n        return urbandict;\r\n    } catch (error) {\r\n        // Log any errors that occur\r\n        console.error('Error fetching data from Urban Dictionary:', error);\r\n        return {\r\n            dictionary: undefined\r\n        }\r\n    }\r\n}\r\n\r\nconst getAlternativeDictionary = async (word) => {\r\n    const urlToFetch = `https://dictionary-data-api.p.rapidapi.com/definition/${word}`;\r\n\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'X-RapidAPI-Key': '6e50a9b4ebmsh947bc781503473cp1a6290jsnbeb98c5847ad',\r\n            'X-RapidAPI-Host': 'dictionary-data-api.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(urlToFetch, options);\r\n        if (response.ok) {\r\n            const jsonResponse = await response.json();\r\n            const formattedDefinitions = {};\r\n\r\n            jsonResponse.meaning.forEach(meaning => {\r\n                const definitions = meaning.values.map(definition => ({definition: definition}));\r\n\r\n                formattedDefinitions[meaning.tag] = definitions;\r\n            });\r\n\r\n            console.log(jsonResponse)\r\n            return formattedDefinitions;\r\n        }\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n\r\nconst dictionaries = { getWordDefaultDictionary, getUrbanDictionaryDefinitions, getWordDefFR: getAlternativeDictionary }\r\n\r\nexport default dictionaries"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}