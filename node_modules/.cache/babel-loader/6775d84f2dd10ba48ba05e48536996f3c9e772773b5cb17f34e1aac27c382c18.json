{"ast":null,"code":"const getWordDefaultDictionary=async word=>{const baseUrl='https://api.dictionaryapi.dev/api/v2/entries/en/';const urlToFetch=\"\".concat(baseUrl).concat(word);try{const response=await fetch(urlToFetch);if(response.ok){const formattedDefinitions={};const jsonResponse=await response.json();const wordInfo=jsonResponse[0];// console.log(wordInfo)\nconst wordMeanings=wordInfo.meanings;wordMeanings.forEach(meaning=>{formattedDefinitions[meaning.partOfSpeech]=meaning.definitions;});console.log(formattedDefinitions);return formattedDefinitions;}}catch(error){return{dictionary:undefined};}};// Define an async function to make the request and return a dictionary\nasync function getUrbanDictionaryDefinitions(word){const url=\"https://urban-dictionary7.p.rapidapi.com/v0/define?term=\".concat(word);const options={method:'GET',headers:{'X-RapidAPI-Key':process.env.REACT_APP_RAPID_API_KEY,'X-RapidAPI-Host':'urban-dictionary7.p.rapidapi.com'}};try{const response=await fetch(url,options);const wordInfo=await response.json();// Get definitions from response\nconst definitions=wordInfo.list;console.log(definitions);// If there is no definitions return undefined\nif(definitions.length===0){const urbandict={dictionary:undefined};return urbandict;}// Prepare the dictionary object\nconst urbandict={definitions:definitions.map(definition=>{return{definition:definition.definition};})};return urbandict;}catch(error){// Log any errors that occur\nconsole.error('Error fetching data from Urban Dictionary:',error);return{dictionary:undefined};}}const getAlternativeDictionary=async word=>{const urlToFetch=\"https://dictionary-data-api.p.rapidapi.com/definition/\".concat(word);const options={method:'GET',headers:{'X-RapidAPI-Key':process.env.REACT_APP_RAPID_API_KEY,'X-RapidAPI-Host':'dictionary-data-api.p.rapidapi.com'}};try{const response=await fetch(urlToFetch,options);if(response.ok){const jsonResponse=await response.json();const formattedDefinitions={};jsonResponse.meaning.forEach(meaning=>{const definitions=meaning.values.map(definition=>({definition:definition}));formattedDefinitions[meaning.tag]=definitions;});console.log(jsonResponse);return formattedDefinitions;}}catch(error){console.log(error);}};const dictionaries={getWordDefaultDictionary,getUrbanDictionaryDefinitions,getAlternativeDictionary};export default dictionaries;","map":{"version":3,"names":["getWordDefaultDictionary","word","baseUrl","urlToFetch","concat","response","fetch","ok","formattedDefinitions","jsonResponse","json","wordInfo","wordMeanings","meanings","forEach","meaning","partOfSpeech","definitions","console","log","error","dictionary","undefined","getUrbanDictionaryDefinitions","url","options","method","headers","process","env","REACT_APP_RAPID_API_KEY","list","length","urbandict","map","definition","getAlternativeDictionary","values","tag","dictionaries"],"sources":["C:/Programming/Projects/definition-app/src/Modules/API's.js"],"sourcesContent":["const getWordDefaultDictionary = async (word) => {\r\n\r\n    const baseUrl = 'https://api.dictionaryapi.dev/api/v2/entries/en/'\r\n    const urlToFetch = `${baseUrl}${word}`;\r\n\r\n    try {\r\n        const response = await fetch(urlToFetch);\r\n        if (response.ok) {\r\n            const formattedDefinitions = {}\r\n\r\n            const jsonResponse = await response.json();\r\n            const wordInfo = jsonResponse[ 0 ];\r\n            // console.log(wordInfo)\r\n\r\n            const wordMeanings = wordInfo.meanings\r\n            wordMeanings.forEach(meaning => {\r\n                formattedDefinitions[meaning.partOfSpeech] = meaning.definitions;\r\n            })\r\n\r\n            console.log(formattedDefinitions)\r\n            return formattedDefinitions;\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            dictionary: undefined\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n// Define an async function to make the request and return a dictionary\r\nasync function getUrbanDictionaryDefinitions(word) {\r\n    const url = `https://urban-dictionary7.p.rapidapi.com/v0/define?term=${word}`;\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'X-RapidAPI-Key': process.env.REACT_APP_RAPID_API_KEY,\r\n            'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(url, options);\r\n        const wordInfo = await response.json()\r\n\r\n        // Get definitions from response\r\n        const definitions = wordInfo.list;\r\n\r\n        console.log(definitions)\r\n\r\n        // If there is no definitions return undefined\r\n        if (definitions.length === 0) {\r\n            const urbandict = {\r\n                dictionary: undefined\r\n            }\r\n            return urbandict\r\n        }\r\n\r\n        // Prepare the dictionary object\r\n        const urbandict = {\r\n            definitions: definitions.map(definition => {\r\n                return {\r\n                    definition: definition.definition\r\n                };\r\n            })\r\n        };\r\n\r\n        return urbandict;\r\n    } catch (error) {\r\n        // Log any errors that occur\r\n        console.error('Error fetching data from Urban Dictionary:', error);\r\n        return {\r\n            dictionary: undefined\r\n        }\r\n    }\r\n}\r\n\r\nconst getAlternativeDictionary = async (word) => {\r\n    const urlToFetch = `https://dictionary-data-api.p.rapidapi.com/definition/${word}`;\r\n\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'X-RapidAPI-Key': process.env.REACT_APP_RAPID_API_KEY,\r\n            'X-RapidAPI-Host': 'dictionary-data-api.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(urlToFetch, options);\r\n        if (response.ok) {\r\n            const jsonResponse = await response.json();\r\n            const formattedDefinitions = {};\r\n\r\n            jsonResponse.meaning.forEach(meaning => {\r\n                const definitions = meaning.values.map(definition => ({definition: definition}));\r\n\r\n                formattedDefinitions[meaning.tag] = definitions;\r\n            });\r\n\r\n            console.log(jsonResponse)\r\n            return formattedDefinitions;\r\n        }\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n\r\nconst dictionaries = { getWordDefaultDictionary, getUrbanDictionaryDefinitions, getAlternativeDictionary }\r\n\r\nexport default dictionaries"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}