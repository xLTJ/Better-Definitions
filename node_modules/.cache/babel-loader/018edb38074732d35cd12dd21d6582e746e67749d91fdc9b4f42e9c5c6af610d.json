{"ast":null,"code":"const axios = require('axios');\nconst baseUrl = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\nconst getWordDefaultDictionary = async word => {\n  const urlToFetch = `${baseUrl}${word}`;\n  try {\n    const response = await fetch(urlToFetch);\n    if (response.ok) {\n      const formattedDefinitions = {};\n      const jsonResponse = await response.json();\n      const wordInfo = jsonResponse[0];\n      console.log(wordInfo);\n      const wordMeanings = wordInfo.meanings;\n      wordMeanings.forEach(meaning => {\n        formattedDefinitions[meaning.partOfSpeech] = [meaning.definitions];\n      });\n\n      // console.log(formattedDefinitions)\n      const wordDefinitions = wordMeanings[0].definitions;\n\n      // wordDefinitions.forEach(item => console.log(`${item.definition}\\n`))\n      console.log(formattedDefinitions);\n      return formattedDefinitions;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Define an async function to make the request and return a dictionary\nasync function getUrbanDictionaryDefinitions(word) {\n  const url = 'https://urban-dictionary7.p.rapidapi.com/v0/define?term=yeet';\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': '0edc2577dfmshd7da9fdc734b359p1b590fjsn8c739bb8a679',\n      'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\n    }\n  };\n  try {\n    const options = {\n      method: 'GET',\n      url: 'https://urban-dictionary7.p.rapidapi.com/v0/define',\n      headers: {\n        'X-RapidAPI-Key': '8c9cda6d86mshd57857017b3c5d4p11c903jsnd79c9df9846c',\n        'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\n      }\n    };\n\n    // Update the URL with the term provided\n    options.params = {\n      term: word\n    };\n\n    // Make the request\n    const response = await axios.request(options);\n\n    // Get definitions from response\n    const definitions = response.data.list;\n\n    // Sort definitions by number of thumbs up in descending order\n    definitions.sort((a, b) => b.thumbs_up - a.thumbs_up);\n\n    // Prepare the dictionary object\n    const urbandict = {\n      definitions: definitions.map(definition => {\n        return {\n          definition: definition.definition\n        };\n      })\n    };\n    return urbandict;\n  } catch (error) {\n    // Log any errors that occur\n    console.error('Error fetching data from Urban Dictionary:', error);\n    return null;\n  }\n}\nconst dictionaries = {\n  getWordDefaultDictionary,\n  getUrbanDictionaryDefinitions\n};\nexport default dictionaries;","map":{"version":3,"names":["axios","require","baseUrl","getWordDefaultDictionary","word","urlToFetch","response","fetch","ok","formattedDefinitions","jsonResponse","json","wordInfo","console","log","wordMeanings","meanings","forEach","meaning","partOfSpeech","definitions","wordDefinitions","error","getUrbanDictionaryDefinitions","url","options","method","headers","params","term","request","data","list","sort","a","b","thumbs_up","urbandict","map","definition","dictionaries"],"sources":["C:/Programming/React/definition-app/src/Modules/API's.js"],"sourcesContent":["const axios = require('axios');\r\n\r\nconst baseUrl = 'https://api.dictionaryapi.dev/api/v2/entries/en/'\r\n\r\nconst getWordDefaultDictionary = async (word) => {\r\n    const urlToFetch = `${baseUrl}${word}`;\r\n\r\n    try {\r\n        const response = await fetch(urlToFetch);\r\n        if (response.ok) {\r\n            const formattedDefinitions = {}\r\n\r\n            const jsonResponse = await response.json();\r\n            const wordInfo = jsonResponse[ 0 ];\r\n            console.log(wordInfo)\r\n\r\n            const wordMeanings = wordInfo.meanings\r\n            wordMeanings.forEach(meaning => {\r\n                formattedDefinitions[meaning.partOfSpeech] = [meaning.definitions];\r\n            })\r\n\r\n            // console.log(formattedDefinitions)\r\n            const wordDefinitions = wordMeanings[0].definitions\r\n\r\n            // wordDefinitions.forEach(item => console.log(`${item.definition}\\n`))\r\n            console.log(formattedDefinitions)\r\n            return formattedDefinitions;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n\r\n\r\n// Define an async function to make the request and return a dictionary\r\nasync function getUrbanDictionaryDefinitions(word) {\r\n    const url = 'https://urban-dictionary7.p.rapidapi.com/v0/define?term=yeet';\r\n    const options = {\r\n        method: 'GET',\r\n        headers: {\r\n            'X-RapidAPI-Key': '0edc2577dfmshd7da9fdc734b359p1b590fjsn8c739bb8a679',\r\n            'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\r\n        }\r\n    };\r\n    \r\n    try {\r\n        const options = {\r\n            method: 'GET',\r\n            url: 'https://urban-dictionary7.p.rapidapi.com/v0/define',\r\n            headers: {\r\n                'X-RapidAPI-Key': '8c9cda6d86mshd57857017b3c5d4p11c903jsnd79c9df9846c',\r\n                'X-RapidAPI-Host': 'urban-dictionary7.p.rapidapi.com'\r\n            }\r\n        };\r\n\r\n        // Update the URL with the term provided\r\n        options.params = { term: word };\r\n\r\n        // Make the request\r\n        const response = await axios.request(options);\r\n\r\n        // Get definitions from response\r\n        const definitions = response.data.list;\r\n\r\n        // Sort definitions by number of thumbs up in descending order\r\n        definitions.sort((a, b) => b.thumbs_up - a.thumbs_up);\r\n\r\n        // Prepare the dictionary object\r\n        const urbandict = {\r\n            definitions: definitions.map(definition => {\r\n                return {\r\n                    definition: definition.definition\r\n                };\r\n            })\r\n        };\r\n\r\n        return urbandict;\r\n    } catch (error) {\r\n        // Log any errors that occur\r\n        console.error('Error fetching data from Urban Dictionary:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst dictionaries = { getWordDefaultDictionary, getUrbanDictionaryDefinitions }\r\n\r\nexport default dictionaries"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMC,OAAO,GAAG,kDAAkD;AAElE,MAAMC,wBAAwB,GAAG,MAAOC,IAAI,IAAK;EAC7C,MAAMC,UAAU,GAAI,GAAEH,OAAQ,GAAEE,IAAK,EAAC;EAEtC,IAAI;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,UAAU,CAAC;IACxC,IAAIC,QAAQ,CAACE,EAAE,EAAE;MACb,MAAMC,oBAAoB,GAAG,CAAC,CAAC;MAE/B,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAC1C,MAAMC,QAAQ,GAAGF,YAAY,CAAE,CAAC,CAAE;MAClCG,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MAErB,MAAMG,YAAY,GAAGH,QAAQ,CAACI,QAAQ;MACtCD,YAAY,CAACE,OAAO,CAACC,OAAO,IAAI;QAC5BT,oBAAoB,CAACS,OAAO,CAACC,YAAY,CAAC,GAAG,CAACD,OAAO,CAACE,WAAW,CAAC;MACtE,CAAC,CAAC;;MAEF;MACA,MAAMC,eAAe,GAAGN,YAAY,CAAC,CAAC,CAAC,CAACK,WAAW;;MAEnD;MACAP,OAAO,CAACC,GAAG,CAACL,oBAAoB,CAAC;MACjC,OAAOA,oBAAoB;IAC/B;EACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZT,OAAO,CAACC,GAAG,CAACQ,KAAK,CAAC;EACtB;AACJ,CAAC;;AAID;AACA,eAAeC,6BAA6BA,CAACnB,IAAI,EAAE;EAC/C,MAAMoB,GAAG,GAAG,8DAA8D;EAC1E,MAAMC,OAAO,GAAG;IACZC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,gBAAgB,EAAE,oDAAoD;MACtE,iBAAiB,EAAE;IACvB;EACJ,CAAC;EAED,IAAI;IACA,MAAMF,OAAO,GAAG;MACZC,MAAM,EAAE,KAAK;MACbF,GAAG,EAAE,oDAAoD;MACzDG,OAAO,EAAE;QACL,gBAAgB,EAAE,oDAAoD;QACtE,iBAAiB,EAAE;MACvB;IACJ,CAAC;;IAED;IACAF,OAAO,CAACG,MAAM,GAAG;MAAEC,IAAI,EAAEzB;IAAK,CAAC;;IAE/B;IACA,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAAC8B,OAAO,CAACL,OAAO,CAAC;;IAE7C;IACA,MAAML,WAAW,GAAGd,QAAQ,CAACyB,IAAI,CAACC,IAAI;;IAEtC;IACAZ,WAAW,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,SAAS,GAAGF,CAAC,CAACE,SAAS,CAAC;;IAErD;IACA,MAAMC,SAAS,GAAG;MACdjB,WAAW,EAAEA,WAAW,CAACkB,GAAG,CAACC,UAAU,IAAI;QACvC,OAAO;UACHA,UAAU,EAAEA,UAAU,CAACA;QAC3B,CAAC;MACL,CAAC;IACL,CAAC;IAED,OAAOF,SAAS;EACpB,CAAC,CAAC,OAAOf,KAAK,EAAE;IACZ;IACAT,OAAO,CAACS,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IAClE,OAAO,IAAI;EACf;AACJ;AAGA,MAAMkB,YAAY,GAAG;EAAErC,wBAAwB;EAAEoB;AAA8B,CAAC;AAEhF,eAAeiB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}